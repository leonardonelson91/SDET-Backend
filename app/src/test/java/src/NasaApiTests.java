/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src;

import org.apache.commons.lang3.StringUtils;
import org.testng.annotations.*;
import src.gov.nasa.api.model.Photo;

import java.time.LocalDate;
import java.util.*;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static java.util.stream.Collectors.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.testng.Assert.*;
import static src.gov.nasa.api.NasaApi.*;

public class NasaApiTests {

    private String API_KEY;

    public NasaApiTests() {
        API_KEY = System.getenv("API_KEY");
        if(StringUtils.isEmpty(API_KEY)) {
            throw new RuntimeException("The NASA API Key must be provided.");
        }
    }

    @Test
    public void test_retrieve_curiosity_rover_photos_by_sol() {
        List<Photo> curiosityPhotos = getCuriosityPhotosBySol(1000);

        assertThat(curiosityPhotos.size(), greaterThanOrEqualTo(10));
        assertThat(curiosityPhotos, everyItem(hasProperty("sol", equalTo(1000))));
    }

    @Test
    public void test_retrieve_curiosity_rover_photos_by_earth_date_equiv_to_1000_sol() {
        LocalDate earthQueryDate = getEarthQueryDateFromSol(1000);
        List<Photo> curiosityPhotos = getCuriosityPhotosByEarthDate(earthQueryDate);

        assertThat(curiosityPhotos.size(), greaterThanOrEqualTo(10));
        assertThat(curiosityPhotos, everyItem(hasProperty("sol", equalTo(1000))));
        assertThat(curiosityPhotos, everyItem(hasProperty("earth_date", equalTo(earthQueryDate.toString()))));
    }

    @Test
    public void test_retrieve_mars_photos_by_sols_and_earth_date_must_equal() {
        List<Photo> curiosityPhotosBySol = getCuriosityPhotosBySol(1000);
        List<Photo> curiosityPhotosByEarthDate = getCuriosityPhotosByEarthDate(getEarthQueryDateFromSol(1000));

        assertEquals(curiosityPhotosBySol, curiosityPhotosByEarthDate, "The photos by sols and earth date do not match.");
    }

    @Test
    public void test_no_camera_should_exceed_10_times_the_amount_of_pictures_from_other_cameras() {
        List<Photo> curiosityPhotosBySol = getCuriosityPhotosBySol(1000);

        Map<String, Long> photosByCamera = curiosityPhotosBySol.stream()
                .collect(groupingBy(p -> p.getCamera().getName(), counting()));

        Optional<Map.Entry<String, Long>> exceedingPhotosCamera = photosByCamera.entrySet().stream().max((entry1, entry2) -> entry1.getValue() > entry2.getValue() * 10 ? 1 : -1);

        assertFalse(exceedingPhotosCamera.isPresent(), String.format("The Camera %s exceeds by 10 times the picture amount from other cameras.", exceedingPhotosCamera.get().getKey()));
    }

    /**
     * Returns the photos made by the Curiosity Rover in a certain martian sol.
     * @param sol the number of sols since the rover's landing date.
     * @return a list of photos for a certain martian sol.
     */
    private List<Photo> getCuriosityPhotosBySol(Integer sol) {
        return given()
                .queryParam("api_key", API_KEY)
                .queryParam("sol", sol)
                .when()
                .get(MARS_ROVERS_CURIOSITY_PHOTOS_ENDPOINT)
                .then()
                .statusCode(200)
                .extract()
                .body()
                .jsonPath().getList("photos", Photo.class);
    }

    /**
     * Returns the photos made by the Curiosity Rover in a certain Earth's date.
     * @param earthQueryDate the earth's date to query the rover's photos
     * @return a list of photos for a certain earth's date
     */
    private List<Photo> getCuriosityPhotosByEarthDate(LocalDate earthQueryDate) {
        return given()
                .queryParam("api_key", API_KEY)
                .queryParam("earth_date", earthQueryDate.toString())
                .when()
                .get(MARS_ROVERS_CURIOSITY_PHOTOS_ENDPOINT)
                .then()
                .statusCode(200)
                .extract()
                .body()
                .jsonPath().getList("photos", Photo.class);
    }

    /**
     * Returns the earth's query date based on the number of Martian sols and the rover's landing date.
     * @param sol the number of martian sols since the rover landed
     * @return the earth's query date based on the number of Martian sols.
     */
    private LocalDate getEarthQueryDateFromSol(Integer sol) {
        Double earthSecondsFromSol = 88775.24409; // This the amount of seconds in earth a martian sol has
        Integer daySecondsInEarth = 86400; //This is an earth's day in seconds
        String roverLandingDateStr =
                given()
                        .queryParam("api_key", API_KEY)
                        .when()
                        .get(CURIOSITY_ROVER_ENDPOINT)
                        .then()
                        .statusCode(200)
                        .extract()
                        .path("rover.landing_date");

        // Here we calculate the amount of earth days to use in the query based in the number of sols
        Long daysOnEarthFromSol = Math.round(sol * earthSecondsFromSol) / daySecondsInEarth;
        LocalDate roverLandingDate = LocalDate.parse(roverLandingDateStr);
        LocalDate earthQueryDate = roverLandingDate.plusDays(daysOnEarthFromSol);
        return earthQueryDate;
    }
}
